Laravel - PHP - pasos a seguir
0.0 -instalador de Laravel usando Composer:
composer global require "laravel/installer"
0 - verificar versiones en terminal
0.0 - composer global update ó composer self-update
0.1 - laravel
    php artisan --version
    - laravel framework : 8.74.0
0.2 - php
    php -v
    - 7.4.16
0.3 - npm
    npm -v
    - 6.14.14
0.4 - node
    node -v
    - 14.17.5

1 - crear proyecto laravel mediante vsCode
1.1 laravel new "nombre-proyecto" --git

1 - crear proyecto laravel mediante composer, desde la raiz del directorio www
1.1 composer create-project laravel/laravel "nombre-proyecto"

2 - configuración GIT
2.1 git config --global user.email "ramuelcl@gmail.com"
2.2 git config --global user.name "Ramuel Gonzalez"
2.3 echo "# nombre-proyecto" >> README.md
2.4 git add README.md
2.5 git commit -m "first commit"
2.6 git remote add origin https://github.com/Ramuelcl/nombre-proyecto.git
2.7 git push -u origin main
2.8 git remote add origin https://github.com/Ramuelcl/guzanet.git

3 - instalar jetstream
3.1 composer require laravel/jetstream
3.2 php artisan jetstream:install livewire
ó
3 - instalar jetstream
3.1 composer require laravel/jetstream
3.2 php artisan jetstream:install livewire

===================================
fortify
===================================
4 - instalar proyecto nuevo
laravel new "fortify" --git

4.1 archivo App\Providers\AppServiceProviders.php
use Illuminate\Support\Facades\Schema;
use Illuminate\Pagination\Paginator;
function boot()
        Schema::defaultStringLength(191);
        Paginator::useBootstrap();
4.2 instalar bootstrap (5.1.3)
npm install bootstrap
4.3 instalar jquery (3.6.0)
npm install jquery
4.4 instalar fortify
composer require laravel/fortify
4.5 publicar el servicio proveedor de fortify
php artisan vendor:publish --provider="Laravel\Fortify\FortifyServiceProvider"
4.6 conectar y/o crear base de datos
DB_CONNECTION=sqlite ó mysql
4.7 agregar config\app.php[Providers]
App\Providers\FortifyServiceProvider::class,
4.8 limpiar la cache
php artisan config:cache
4.9 migrar las tablas

===================================
registar un usuario automaticamente
$user[
  'email'    => 'guest@email.com',
  'password' => Hash::make('guest'),
]
Auth::login($user);

===================================
PS C:\laragon\www\basic> php artisan
-----------------------------------
Laravel Framework 8.69.0

Usage:
  command [options] [arguments]

Options:
  -h, --help            Display help for the given command. When no command is given display help for the list command
  -q, --quiet           Do not output any message
  -V, --version         Display this application version
      --ansi|--no-ansi  Force (or disable --no-ansi) ANSI output
  -n, --no-interaction  Do not ask any interactive question
      --env[=ENV]       The environment the command should run under
  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug

Available commands:
  clear-compiled       Remove the compiled class file
  db                   Start a new database CLI session
  down                 Put the application into maintenance / demo mode
  env                  Display the current framework environment
  help                 Display help for a command
  inspire              Display an inspiring quote
  list                 List commands
  migrate              Run the database migrations
  optimize             Cache the framework bootstrap files
  serve                Serve the application on the PHP development server
  test                 Run the application tests
  tinker               Interact with your application
  up                   Bring the application out of maintenance mode
 auth
  auth:clear-resets    Flush expired password reset tokens
 cache
  cache:clear          Flush the application cache
  cache:forget         Remove an item from the cache
  cache:table          Create a migration for the cache database table
 config
  config:cache         Create a cache file for faster configuration loading
  config:clear         Remove the configuration cache file
 db
  db:seed              Seed the database with records
  db:wipe              Drop all tables, views, and types
 event
  event:cache          Discover and cache the application's events and listeners
  event:clear          Clear all cached events and listeners
  event:generate       Generate the missing events and listeners based on registration
  event:list           List the application's events and listeners
 key
  key:generate         Set the application key
 make
  make:cast            Create a new custom Eloquent cast class
  make:channel         Create a new channel class
  make:command         Create a new Artisan command
  make:component       Create a new view component class
  make:controller      Create a new controller class
  make:event           Create a new event class
  make:exception       Create a new custom exception class
  make:factory         Create a new model factory
  make:job             Create a new job class
  make:listener        Create a new event listener class
  make:mail            Create a new email class
  make:middleware      Create a new middleware class
  make:migration       Create a new migration file
  make:model           Create a new Eloquent model class
  make:notification    Create a new notification class
  make:observer        Create a new observer class
  make:policy          Create a new policy class
  make:provider        Create a new service provider class
  make:request         Create a new form request class
  make:resource        Create a new resource
  make:rule            Create a new validation rule
  make:seeder          Create a new seeder class
  make:test            Create a new test class
 migrate
  migrate:fresh        Drop all tables and re-run all migrations
  migrate:install      Create the migration repository
  migrate:refresh      Reset and re-run all migrations
  migrate:reset        Rollback all database migrations
  migrate:rollback     Rollback the last database migration
  migrate:status       Show the status of each migration
 model
  model:prune          Prune models that are no longer needed
 notifications
  notifications:table  Create a migration for the notifications table
 optimize
  optimize:clear       Remove the cached bootstrap files
 package
  package:discover     Rebuild the cached package manifest
 queue
  queue:batches-table  Create a migration for the batches database table
  queue:clear          Delete all of the jobs from the specified queue
  queue:failed         List all of the failed queue jobs
  queue:failed-table   Create a migration for the failed queue jobs database table
  queue:flush          Flush all of the failed queue jobs
  queue:forget         Delete a failed queue job
  queue:listen         Listen to a given queue
  queue:monitor        Monitor the size of the specified queues
  queue:prune-batches  Prune stale entries from the batches database
  queue:prune-failed   Prune stale entries from the failed jobs table
  queue:restart        Restart queue worker daemons after their current job
  queue:retry          Retry a failed queue job
  queue:retry-batch    Retry the failed jobs for a batch
  queue:table          Create a migration for the queue jobs database table
  queue:work           Start processing jobs on the queue as a daemon
 route
  route:cache          Create a route cache file for faster route registration
  route:clear          Remove the route cache file
  route:list           List all registered routes
 sail
  sail:install         Install Laravel Sail's default Docker Compose file
  sail:publish         Publish the Laravel Sail Docker files
 schedule
  schedule:list        List the scheduled commands
  schedule:run         Run the scheduled commands
  schedule:test        Run a scheduled command
  schedule:work        Start the schedule worker
 schema
  schema:dump          Dump the given database schema
 session
  session:table        Create a migration for the session database table
 storage
  storage:link         Create the symbolic links configured for the application
 stub
  stub:publish         Publish all stubs that are available for customization
 vendor
  vendor:publish       Publish any publishable assets from vendor packages
 view
  view:cache           Compile all of the application's Blade templates
  view:clear           Clear all compiled view files
-----------------------------------
php artisan make:model Empleado -mcr(fs)
Empleado: como se llamará el modelo
-m, --migration       Create a new migration file for the model
      --policy          Create a new policy for the model
-c, --controller      Create a new controller for the model
-r, --resource        Indicates if the generated controller should be a resource controller
(
-f, --factory         Create a new factory for the model
-s, --seed            Create a new seeder for the model

)
crea los siguientes archivos:
app\Models\Empleado.php :modelo
database\factories\EmpleadoFactory.php :fabrica los datos
database\seeders\EmpleadoSeeders.php :fabrica los datos especificos
database\migraions\2021_10_28_200245_create_empleados_table.php :crea la estructura de tabla con los campos a definir
app\Htp\Controllers\EmpleadoController.php :controlador de Empleado
app\Policies\EmpleadoPolicie.php :politicas de uso de Empleado
-----------------------------------

-----------------------------------
php artisan migrate:refresh --seed
-----------------------------------
archivo App\Providers\AppServiceProviders.php
use Illuminate\Support\Facades\Schema;
use Illuminate\Pagination\Paginator;
function boot()
        Schema::defaultStringLength(128);
        Paginator::useBootstrap();
-----------------------------------
php artisan make:model -h
Description:
  Create a new Eloquent model class

Usage:
  make:model [options] [--] <name>

Arguments:
  name                  The name of the class

Options:
  -a, --all             Generate a migration, seeder, factory, policy, and resource controller for the model
  -c, --controller      Create a new controller for the model
  -f, --factory         Create a new factory for the model
      --force           Create the class even if the model already exists
  -m, --migration       Create a new migration file for the model
      --policy          Create a new policy for the model
  -s, --seed            Create a new seeder for the model
  -p, --pivot           Indicates if the generated model should be a custom intermediate table model
  -r, --resource        Indicates if the generated controller should be a resource controller
      --api             Indicates if the generated controller should be an API controller
      --test            Generate an accompanying PHPUnit test for the Model
      --pest            Generate an accompanying Pest test for the Model
  -h, --help            Display help for the given command. When no command is given display help for the list command
  -q, --quiet           Do not output any message
  -V, --version         Display this application version
      --ansi|--no-ansi  Force (or disable --no-ansi) ANSI output
  -n, --no-interaction  Do not ask any interactive question
      --env[=ENV]       The environment the command should run under
  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug

-----------------------------------
// instalar authentication:
-----------------------------------
-stisla para los roles
página web: https://github.com/InfyOmLabs/laravel-ui-stisla

-composer require infyomlabs/laravel-ui-stisla

To Generate a full authentication UI,
-php artisan ui stisla --auth

To Install just Stisla theme assets,
php artisan ui stisla

And then run,
npm install && npm run dev

// Spatie laravel-permission/
-https://spatie.be/docs/laravel-permission/v5/installation-laravel

Puede instalar el paquete a través del compositor:
-composer require spatie/laravel-permission

Opcional: el proveedor de servicios se registrará automáticamente. O puede agregar manualmente el proveedor de servicios en su config/app.php, archivo:
-
'providers' => [
    // ...Spatie
    Spatie\Permission\PermissionServiceProvider::class,
];

Debe publicar la migración y el config/permission.php archivo de configuración con:
-php artisan vendor:publish --provider="Spatie\Permission\PermissionServiceProvider"

Si va a usar la función de equipos, debe actualizar su config/permission.php, archivo de configuración y configurar
'teams' => true,
si desea usar una clave externa personalizada para los equipos, debe cambiar team_foreign_key.

Limpia tu caché de configuración. Este paquete requiere acceso a permissionconfig. Por lo general, es una mala práctica realizar el almacenamiento en caché de configuración en un entorno de desarrollo. Si ha estado almacenando configuraciones en caché localmente, borre su caché de configuración con cualquiera de estos comandos:

-php artisan optimize:clear
-php artisan migrate

Si es necesario, cambiar en config/database.php
            'charset' => 'utf8',
            'collation' => 'utf8_general_ci',
            'engine' => 'innodb',

debe actualizar App\Models\User.php,
use Spatie\Permission\Traits\HasRoles;
...
class User extends Authenticatable
{
use HasRoles;


crear seeder para roles
php artisan make:seeder RoleSeeder
-------------------
use Spatie\Permission\Models\Role;
use Spatie\Permission\Models\Permission;

$role = Role::create(['name' => 'writer']);
$permission = Permission::create(['name' => 'edit articles']);
Se puede asignar un permiso a un rol mediante uno de estos métodos:

$role->givePermissionTo($permission);
$permission->assignRole($role);
Se pueden sincronizar varios permisos con un rol mediante uno de estos métodos:

$role->syncPermissions($permissions);
$permission->syncRoles($roles);
Se puede eliminar un permiso de un rol mediante uno de estos métodos:

$role->revokePermissionTo($permission);
$permission->removeRole($role);
-------------------
asignar seguridad a las rutas
archivo: app/Http/Kernel.php
-------------------
protected $routeMiddleware = [
    // ...Spatie
    'role' => \Spatie\Permission\Middlewares\RoleMiddleware::class,
    'permission' => \Spatie\Permission\Middlewares\PermissionMiddleware::class,
    'role_or_permission' => \Spatie\Permission\Middlewares\RoleOrPermissionMiddleware::class,
];
-------------------
para instalar Formularios y HTML
https://laravelcollective.com/docs/6.x/html

-composer require laravelcollective/html
remover componente
-composer remove laravelcollective/html
-------------------
crear seeder
-php artisan make:seeder SeederTablaPermisos
ejecutar seeder
-php artisan db:seed
ó especificar un seeder
-php artisan db:seed --class=SeederTablaPermisos

se puede ejecutar un seeder a travez de la fabricacion de tablas
php artisan migrate:fresh --seed // fresh borra las tablas y las reconstruye

// actualizar los autoload
-composer dump-autoload

===========================
ingreso a aplicacion
con usuario definido
---------------------------
public function __construct() {
  $this->middleware('auth');
}


===========================
ingreso a aplicacion excepto
---------------------------
public function __construct() {
  $this->middleware('auth')->except(['x', 'y']);
}

se puede ingresar a una parte
solo si está auntenticado
@auth
...
@endauth

si no lo está sería
@guest
...
@endguest


======================
crear Empleado

php artisan make:model Empleado -mcr

======================
php artisan
Laravel Framework 8.74.0

Usage:
  command [options] [arguments]

Options:
  -h, --help            Display help for the given command. When no command is given display help for the list command  -q, --quiet           Do not output any message
  -V, --version         Display this application version
      --ansi|--no-ansi  Force (or disable --no-ansi) ANSI output
  -n, --no-interaction  Do not ask any interactive question
      --env[=ENV]       The environment the command should run under
  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug

Available commands:
  clear-compiled                Remove the compiled class file
  completion                    Dump the shell completion script
  db                            Start a new database CLI session
  down                          Put the application into maintenance / demo mode
  env                           Display the current framework environment
  help                          Display help for a command
  inspire                       Display an inspiring quote
  list                          List commands
  migrate                       Run the database migrations
  optimize                      Cache the framework bootstrap files
  serve                         Serve the application on the PHP development server
  test                          Run the application tests
  tinker                        Interact with your application
  ui                            Swap the front-end scaffolding for the application
  up                            Bring the application out of maintenance mode
 auth
  auth:clear-resets             Flush expired password reset tokens
 cache
  cache:clear                   Flush the application cache
  cache:forget                  Remove an item from the cache
  cache:table                   Create a migration for the cache database table
 config
  config:cache                  Create a cache file for faster configuration loading
  config:clear                  Remove the configuration cache file
 db
  db:seed                       Seed the database with records
  db:wipe                       Drop all tables, views, and types
 event
  event:cache                   Discover and cache the application's events and listeners
  event:clear                   Clear all cached events and listeners
  event:generate                Generate the missing events and listeners based on registration
  event:list                    List the application's events and listeners
 key
  key:generate                  Set the application key
 laraveles
  laraveles:install-lang        Instala/Actualiza los ficheros de traducción
 make
  make:cast                     Create a new custom Eloquent cast class
  make:channel                  Create a new channel class
  make:command                  Create a new Artisan command
  make:component                Create a new view component class
  make:controller               Create a new controller class
  make:event                    Create a new event class
  make:exception                Create a new custom exception class
  make:factory                  Create a new model factory
  make:job                      Create a new job class
  make:listener                 Create a new event listener class
  make:mail                     Create a new email class
  make:middleware               Create a new middleware class
  make:migration                Create a new migration file
  make:model                    Create a new Eloquent model class
  make:notification             Create a new notification class
  make:observer                 Create a new observer class
  make:policy                   Create a new policy class
  make:provider                 Create a new service provider class
  make:request                  Create a new form request class
  make:resource                 Create a new resource
  make:rule                     Create a new validation rule
  make:seeder                   Create a new seeder class
  make:test                     Create a new test class
 migrate
  migrate:fresh                 Drop all tables and re-run all migrations
  migrate:install               Create the migration repository
  migrate:refresh               Reset and re-run all migrations
  migrate:reset                 Rollback all database migrations
  migrate:rollback              Rollback the last database migration
  migrate:status                Show the status of each migration
 model
  model:prune                   Prune models that are no longer needed
 notifications
  notifications:table           Create a migration for the notifications table
 optimize
  optimize:clear                Remove the cached bootstrap files
 package
  package:discover              Rebuild the cached package manifest
 permission
  permission:cache-reset        Reset the permission cache
  permission:create-permission  Create a permission
  permission:create-role        Create a role
  permission:setup-teams        Setup the teams feature by generating the associated migration.
  permission:show               Show a table of roles and permissions per guard
 queue
  queue:batches-table           Create a migration for the batches database table
  queue:clear                   Delete all of the jobs from the specified queue
  queue:failed                  List all of the failed queue jobs
  queue:failed-table            Create a migration for the failed queue jobs database table
  queue:flush                   Flush all of the failed queue jobs
  queue:forget                  Delete a failed queue job
  queue:listen                  Listen to a given queue
  queue:monitor                 Monitor the size of the specified queues
  queue:prune-batches           Prune stale entries from the batches database
  queue:prune-failed            Prune stale entries from the failed jobs table
  queue:restart                 Restart queue worker daemons after their current job
  queue:retry                   Retry a failed queue job
  queue:retry-batch             Retry the failed jobs for a batch
  queue:table                   Create a migration for the queue jobs database table
  queue:work                    Start processing jobs on the queue as a daemon
 route
  route:cache                   Create a route cache file for faster route registration
  route:clear                   Remove the route cache file
  route:list                    List all registered routes
 sail
  sail:install                  Install Laravel Sail's default Docker Compose file
  sail:publish                  Publish the Laravel Sail Docker files
 schedule
  schedule:list                 List the scheduled commands
  schedule:run                  Run the scheduled commands
  schedule:test                 Run a scheduled command
  schedule:work                 Start the schedule worker
 schema
  schema:dump                   Dump the given database schema
 session
  session:table                 Create a migration for the session database table
 storage
  storage:link                  Create the symbolic links configured for the application
 stub
  stub:publish                  Publish all stubs that are available for customization
 ui
  ui:auth                       Scaffold basic login and registration views and routes
  ui:controllers                Scaffold the authentication controllers
 vendor
  vendor:publish                Publish any publishable assets from vendor packages
 view
  view:cache                    Compile all of the application's Blade templates
  view:clear                    Clear all compiled view files

=======================================
checkBox
<div class="form-group">
    <label for="">Permisos para este Rol:</label>

    @foreach($permission as $value)
        <label>{{ Form::checkbox('permission[]', $value->id, in_array($value->id, $rolePermissions) ? true : false, array('class' => 'name')) }}
        {{ $value->name }}
        </label>

    @endforeach
</div>
